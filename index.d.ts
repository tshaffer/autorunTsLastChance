// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../react
//   ../../@brightsign/bsdatamodel
//   ../../redux
//   ../../@brightsign/ba-context-model
//   ../../@brightsign/bscore

import * as React from 'react';
import { DmState } from '@brightsign/bsdatamodel';
import { Action, Dispatch, ActionCreator } from 'redux';
import { Reducer } from 'redux';
import { BaContextModelState } from '@brightsign/ba-context-model';
import { BsAssetLocator } from '@brightsign/bscore';

/** @module Controller:index */

/** @module Model:index */

/** @module Selector:index */

/** @module Types:index */

/** @private */
export interface BsPpProps {
    autoschedule: PpSchedule | null;
    bsdm: DmState;
}
class BsPpComponent extends React.Component<BsPpProps> {
    componentDidMount(): void;
    render(): JSX.Element;
}
export const BsPp: import("react-redux").ConnectedComponent<typeof BsPpComponent, Pick<React.ClassAttributes<BsPpComponent> & BsPpProps, "ref" | "key">>;
export {};

export const initPresentation: () => BsPpVoidThunkAction;

/** @module Model:base */
/** @private */
export interface BsPpModelBaseAction extends Action {
    type: string;
    payload?: {} | null;
    error?: boolean;
    meta?: {};
}
/** @private */
export interface BsPpModelAction<T> extends BsPpModelBaseAction {
    payload: T;
}
/** @private */
export type BsPpModelActionCreator<T> = ActionCreator<BsPpModelAction<T>>;
export type BsPpModelThunkAction<T> = (dispatch: BsPpDispatch, getState: () => BsPpModelState, extraArgument: undefined) => T;
export interface BsPpBaseAction extends Action {
    type: string;
    payload: {} | null;
    error?: boolean;
    meta?: {};
}
export interface BsPpAction<T> extends BsPpBaseAction {
    payload: T;
}
export type BsPpDispatch = Dispatch<any>;
export type BsPpVoidThunkAction = any;
export type BsPpStringThunkAction = any;
export type BsPpVoidPromiseThunkAction = any;
export type BsPpThunkAction<T> = any;
export type BsPpAnyPromiseThunkAction = any;
export type BsPpActionCreator<T> = ActionCreator<BsPpAction<T>>;
export interface BsPpModelBatchAction extends Action {
    type: string;
    payload: BsPpBaseAction[];
}

/** @module Model:base */
export type BsUiReducer = Reducer<BsPpModelState>;
export const enableBatching: (reduce: (state: BsPpModelState, action: BsPpModelBaseAction) => BsPpModelState) => BsUiReducer;
export const bsPpReducer: Reducer<BsPpModelState, import("redux").AnyAction>;
/** @private */
export function isValidBsPpModelState(state: any): boolean;
/** @private */
export function isValidBsPpModelStateShallow(state: any): boolean;

export const UPDATE_PRESENTATION_DATA = "UPDATE_PRESENTATION_DATA";
export const UPDATE_RUNTIME_ENVIRONMENT = "UPDATE_RUNTIME_ENVIRONMENT";
export const UPDATE_PRESENTATION_SRC_DIRECTORY = "UPDATE_PRESENTATION_SRC_DIRECTORY";
export const UPDATE_SYNC_SPEC_FILE_MAP = "UPDATE_SYNC_SPEC_FILE_MAP";
export const UPDATE_AUTOSCHEDULE = "UPDATE_AUTOSCHEDULE";
export const UPDATE_SCREEN_DIMENSIONS = "UPDATE_SCREEN_DIMENSIONS";
export type UpdatePresentationDataAction = BsPpAction<Partial<PresentationDataState>>;
export type UpdatePresentationStringAction = BsPpAction<Partial<PresentationDataState>>;
export function updatePresentationData(presentationDataState: PresentationDataState): UpdatePresentationDataAction;
export const updateRuntimeEnvironment: (runtimeEnvironment: RuntimeEnvironment) => UpdatePresentationDataAction;
export const updatePresentationSrcDirectory: (srcDirectory: string) => UpdatePresentationDataAction;
export const updatePresentationSyncSpecFileMap: (syncSpecFileMap: SyncSpecFileMap) => UpdatePresentationDataAction;
export const updatePresentationAutoschedule: (autoSchedule: PpSchedule) => UpdatePresentationDataAction;
export const updateScreenDimensions: (screenDimensions: Dimensions) => UpdatePresentationDataAction;
export const presentationDataDefaults: PresentationDataState;
export const presentationDataReducer: (state: PresentationDataState | undefined, { type, payload }: (UpdatePresentationDataAction)) => PresentationDataState;

export function getRuntimeEnvironment(state: any): RuntimeEnvironment;
export function getSrcDirectory(state: any): string;
export function getScreenDimensions(state: any): Dimensions;
export const getSyncSpecFileMap: (state: BsPpState) => SyncSpecFileMap | null;
export const getAutoschedule: (state: any) => PpSchedule | null;
export function getPathFromAssetName(state: BsPpState, assetName: string): string;
export function getAssetPath(state: BsPpState, assetName: string): string;
export const getSyncSpecFile: (state: BsPpState, fileName: string) => Promise<object>;
export function getSyncSpecReferencedFile(fileName: string, syncSpecFileMap: SyncSpecFileMap, rootPath: string): Promise<object>;
export function getFeedPoolDirectory(state: any): string;
export function getFeedPoolFilePath(state: any, hashValue: string): string;
export function feedPoolFileExists(state: any, hashValue: string): string;
export function getFeedCacheRoot(state: any): string;

/** @module Types:base */
export class RuntimeEnvironment {
    static BrightSign: string;
    static BaconPreview: string;
    static Dev: string;
}
/** @private */
export type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
};
export interface FileLUT {
    [fileName: string]: string;
}
export interface BsPpState {
    bsdm: DmState;
    bacdm: BaContextModelState;
    bsPlayer: BsPpModelState;
}
export interface BsPpModelState {
    presentationData: PresentationDataState;
}
export const bsPpStateFromState: (state: any) => BsPpState;

export interface PresentationDataState {
    runtimeEnvironment: RuntimeEnvironment;
    screenDimensions: Dimensions;
    srcDirectory: string;
    syncSpecFileMap: SyncSpecFileMap | null;
    autoSchedule: PpSchedule | null;
}
export interface SyncSpecFileMap {
    [name: string]: SyncSpecDownload;
}
export interface SyncSpecDownload {
    name: string;
    hash: SyncSpecHash;
    size: number;
    link: string;
}
interface SyncSpecHash {
    method: string;
    hex: string;
}
interface SyncSpecMeta {
    client: any;
    server: any;
}
export interface RawSyncSpecFiles {
    download: SyncSpecDownload[];
    ignore: any;
    delete: any;
}
export interface RawSyncSpec {
    meta: SyncSpecMeta;
    files: RawSyncSpecFiles;
}
export {};

export interface PpSchedule {
    scheduledPresentations: ScheduledPresentation[];
}
export interface ScheduledPresentation {
    presentationToSchedule: ScheduledPresentationFileData;
    presentationLocator: BsAssetLocator;
    dateTime: string;
    duration: number;
    allDayEveryDay: boolean;
    recurrence: boolean;
    recurrencePattern: string;
    recurrencePatternDaily: string;
    recurrencePatternDaysOfWeek: number;
    recurrenceStartDate: string;
    recurrenceGoesForever: boolean;
    recurrenceEndDate: string;
    interruption: boolean;
}
export interface ScheduledPresentationFileData {
    name: string;
    fileName: string;
    filePath: string;
}

export const newBsPpId: () => string;
export interface Dimensions {
    width: number;
    height: number;
}
export const calculateAspectRatioFit: (srcWidth: number, srcHeight: number, maxWidth: number, maxHeight: number) => Dimensions;

