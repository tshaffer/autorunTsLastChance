// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../react
//   ../@brightsign/bscore
//   ../redux

import * as React from 'react';
import { BsColor } from '@brightsign/bscore';
import { Action, Dispatch, ActionCreator } from 'redux';
import { Reducer } from 'redux';

/** @module Controller:index */

/** @module Model:index */

/** @module Selector:index */

/** @module Types:index */

/** @internal */
export interface TemplateProps {
    color: BsColor;
    onInitModel: () => any;
    onResetModel: () => any;
    onUpdateTemplateColorAsync: () => any;
    onUpdateTemplateColorBatch: () => any;
}
export class TemplateComponent extends React.Component<TemplateProps> {
    componentDidMount(): void;
    componentWillUnmount(): void;
    renderComponent(): JSX.Element;
    renderModel(): JSX.Element;
    renderController(): JSX.Element;
    renderType(): JSX.Element;
    renderError(): JSX.Element;
    renderHeader(): JSX.Element;
    renderBody(): JSX.Element;
    render(): JSX.Element;
}
export const Template: React.ComponentClass<Pick<TemplateProps, never> & undefined> & {
    WrappedComponent: React.ComponentType<TemplateProps>;
};

export const initModel: () => BsUiModelThunkAction<Promise<any>>;
export const resetModel: () => BsUiModelThunkAction<BsUiModelAction<null>>;

export const updateTemplateColorAsync: () => BsUiModelThunkAction<Promise<any>>;
export const updateTemplateColorBatch: () => BsUiModelThunkAction<BsUiModelBatchAction>;

/** @module Model:base */
export const BSUIMODEL_BATCH = "BSUIMODEL_BATCH";
export const BSUIMODEL_REHYDRATE = "BSUIMODEL_REHYDRATE";
export const BSUIMODEL_RESET = "BSUIMODEL_RESET";
export type BsUiModelDispatch = Dispatch<BsUiModelState>;
export interface BsUiModelBaseAction extends Action {
    type: string;
    payload: {};
    error?: boolean;
    meta?: {};
}
export interface BsUiModelAction<T> extends BsUiModelBaseAction {
    payload: T;
}
export type BsUiModelActionCreator<T> = ActionCreator<BsUiModelAction<T>>;
export type BsUiModelThunkAction<T> = (dispatch: BsUiModelDispatch, getState: () => BsUiModelState, extraArgument: undefined) => T;
export const bsUiModelBatchAction: (action: BsUiModelBaseAction[]) => BsUiModelBatchAction;
export interface BsUiModelBatchAction extends Action {
    type: string;
    payload: BsUiModelBaseAction[];
}
export interface RehydrateBsUiModelParams {
    newBsUiModelState: BsUiModelState;
}
export type RehydrateBsUiModelAction = BsUiModelAction<RehydrateBsUiModelParams>;
export const bsUiModelRehydrateModel: (bsUiModelState: BsUiModelState) => BsUiModelAction<RehydrateBsUiModelParams>;
export type ResetBsUiModelAction = BsUiModelAction<null>;
export const bsUiModelResetModel: () => BsUiModelAction<null>;

/** @module Model:base */
export type BsUiReducer = Reducer<BsUiModelState>;
export const enableBatching: (reduce: (state: BsUiModelState, action: BsUiModelBaseAction | BsUiModelBatchAction) => BsUiModelState) => Reducer<BsUiModelState>;
export const bsUiModelReducer: Reducer<BsUiModelState>;
export const isValidBsUiModelState: (state: any) => boolean;
export const isValidBsUiModelStateShallow: (state: any) => boolean;

export const templateReducer: (state: BsUiModelTemplateState, action: BsUiModelBatchAction) => BsUiModelTemplateState;
export const isValidTemplateState: (state: any) => boolean;
export const isValidTemplateStateShallow: (state: any) => boolean;

export const BSUIMODEL_UPDATE_TEMPLATE_PROPERTY: string;
export const BSUIMODEL_RESET_TEMPLATE_PROPERTY: string;
export type UpdateTemplatePropertyAction = BsUiModelAction<Partial<BsUiModelTemplatePropertyState>>;
export type ResetTemplatePropertyAction = BsUiModelAction<null>;
export const bsUiModelResetTemplateProperty: () => BsUiModelAction<null>;
export const bsUiModelUpdateTemplateColor: (color: BsColor) => BsUiModelAction<Partial<BsUiModelTemplatePropertyState>>;
export const templatePropertyDefault: BsUiModelTemplatePropertyState;
export const templatePropertyReducer: (state: BsUiModelTemplatePropertyState | undefined, {type, payload}: BsUiModelAction<null> | BsUiModelAction<RehydrateBsUiModelParams> | BsUiModelAction<Partial<BsUiModelTemplatePropertyState>>) => BsUiModelTemplatePropertyState;
export const isValidColor: (state: any) => boolean;
export const isValidTemplatePropertyState: (state: any) => boolean;
export const isValidTemplatePropertyStateShallow: (state: any) => boolean;

/** @module Selector:base */
export const bsUiModelFilterBaseState: (state: any) => BsUiModelState;
export const bsUiModelGetBaseState: (state: BsUiModelState) => BsUiModelState;

export const bsUiModelGetTemplateState: (state: BsUiModelState) => BsUiModelTemplateState;

export const bsUiModelGetTemplatePropertyState: (state: BsUiModelState) => BsUiModelTemplatePropertyState;
export const bsUiModelGetTemplatePropertyColorState: (state: BsUiModelState) => BsColor;

/** @module Types:base */
export type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
};
export interface BsUiModelState {
    template: BsUiModelTemplateState;
}
export const createModel: (template: BsUiModelTemplateState) => BsUiModelState;

/** @module Types:template */
export interface BsUiModelTemplateState {
    readonly property: BsUiModelTemplatePropertyState;
}
export const createTemplate: (property: BsUiModelTemplatePropertyState) => BsUiModelTemplateState;

/** @module Types:templateProperties */
export interface BsUiModelTemplatePropertyState {
    color: BsColor;
}
export const createTemplateProperty: (color: BsColor) => BsUiModelTemplatePropertyState;
export const createBsColor: (r: number, g: number, b: number, a: number) => BsColor;

export enum BsUiErrorType {
    unknownError = 0,
    unexpectedError = 1,
    invalidParameters = 2,
    invalidOperation = 3,
    apiError = 4,
    invalidModel = 5,
}
export class BsUiError extends Error {
    name: string;
    type: BsUiErrorType;
    constructor(type: BsUiErrorType, reason?: string);
}
export function isBsUiError(error: Error): error is BsUiError;

